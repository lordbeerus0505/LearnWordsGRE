{"version":3,"sources":["components/Auth.jsx","components/Login.jsx","components/SignUp.jsx","components/LearnWords.jsx","components/FlaggedWords.jsx","components/Main.jsx","components/Dashboard.jsx","components/Chat.jsx","Routes.jsx","serviceWorker.js","index.js"],"names":["React","require","Route","Switch","Login","SignUp","module","exports","props","path","match","console","log","component","axios","state","mobileNumber","password","onMobileChange","setState","target","value","onPasswordChange","openSignUp","history","push","submitLoginForm","post","then","result","data","Success","alert","className","for","type","id","name","onChange","this","bind","class","onClick","Component","firstName","lastName","confirmPassword","userType","onFirstNameChange","onLastNameChange","onConfirmPasswordChange","openLogin","submitSignUpForm","LearnWords","word","meaning","revealMeaning","componentDidMount","get","rememberWord","dontRememberWord","openFlaggedWords","flagWord","document","getElementsByClassName","style","visibility","setTimeout","hideAlert","Alert","color","Button","Card","CardHeader","CardTitle","CardBody","CardText","CardFooter","FlaggedWords","nextWord","openLearnWords","Main","redirectToLogin","redirectToSignUp","Dashboard","redirectToChat","Chat","HashRouter","Routes","exact","Auth","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.e1fa0f2c.chunk.js","sourcesContent":["var React = require('react');\nvar {Route, Switch} = require('react-router-dom');\n\nvar Login = require('./Login');\nvar SignUp = require('./SignUp');\n\nvar Auth = (props) => {\n    const path = props.match.path;\n    console.log(path, \" is the path\");\n    return (\n        <Switch>\n            <Route path={path + \"/login\"} component={Login} />\n            <Route path={path + \"/signup\"} component={SignUp} />\n        </Switch>\n    );\n}\n\nmodule.exports = Auth;\n","var React = require('react');\nconst axios = require('axios');\n\nclass Login extends React.Component {\n\n    state = {\n        mobileNumber: \"\",\n        password: \"\",\n    }\n\n    onMobileChange = (mobileNumber) => {\n        this.setState({\n            mobileNumber: mobileNumber.target.value\n        });\n    }\n\n    onPasswordChange = (password) => {\n        this.setState({\n            password: password.target.value\n        });\n    }\n\n    openSignUp = () => {\n        this.props.history.push('/auth/signup');\n    }\n    \n    submitLoginForm = () => {\n\n        axios.post('/login', this.state)\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    this.props.history.push('/auth/login');\n                    alert(\"Unable to Login\");\n                } else {\n                    this.props.history.push('/dashboard/');\n                }\n             });\n        \n    }\n\n    render() {\n        \n        return (  \n            \n            <div className=\"login-form\">\n                <form>\n                    <label for=\"mobileNumber\">Mobile Number:</label>\n                    <br/>\n                    <input type=\"text\" id=\"mobileNumber\" name=\"mobileNumber\" onChange={this.onMobileChange.bind(this)} />\n                    <br/>\n                    <label for=\"pword\">Password:</label>\n                    <br/>\n                    <input type=\"password\" id=\"pword\" name=\"pword\" onChange={this.onPasswordChange.bind(this)} />\n                    <br/>\n                    <button\n                        type=\"button\"\n                        class=\"primary button\"\n                        onClick={this.submitLoginForm.bind(this)}\n                    >\n                        Submit\n                    </button>\n                </form>\n                <label for=\"signup\" ></label>\n                Don't have an account? Click here to<a onClick={this.openSignUp.bind(this)}> Sign Up</a>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","var React = require('react');\nconst axios = require('axios');\n\nclass SignUp extends React.Component {\n\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        mobileNumber: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        userType: \"client\"\n    }\n\n    onFirstNameChange = (firstName) => {\n        this.setState({\n            firstName: firstName.target.value\n        });\n    }\n\n    onLastNameChange = (lastName) => {\n        this.setState({\n            lastName: lastName.target.value\n        });\n    }\n\n    onMobileChange = (mobileNumber) => {\n        this.setState({\n            mobileNumber: mobileNumber.target.value\n        });\n    }\n\n    onPasswordChange = (password) => {\n        this.setState({\n            password: password.target.value\n        });\n    }\n\n    onConfirmPasswordChange = (confirmPassword) => {\n        this.setState({\n            confirmPassword: confirmPassword.target.value\n        });\n    }\n\n    openLogin = () => {\n        this.props.history.push('/auth/login');\n    }\n\n    submitSignUpForm = () => {\n\n        if (this.state.password !== this.state.confirmPassword) {\n            alert('Passwords do not match');\n        } else {\n            \n            axios.post('/signup', this.state)\n             .then((result) => {\n                console.log(\"sent data\")\n                if (!result.data.Success) {\n                    this.props.history.push('/auth/signup');\n                    alert(\"Unable to SignUp\")\n                } else {\n                    this.props.history.push('/dashboard/');\n                }\n             });\n        }\n        \n    }\n\n    render() {\n        return (\n            <div className=\"login-form\">\n                <form>\n                    <label for=\"firstName\">First Name:</label>\n                    <br/>\n                    <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.onFirstNameChange.bind(this)} />\n                    <br/>\n                    <label for=\"lastName\">Last Name:</label>\n                    <br/>\n                    <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.onLastNameChange.bind(this)} />\n                    <br/>\n                    <label for=\"mobileNumber\">Mobile Number:</label>\n                    <br/>\n                    <input type=\"text\" id=\"mobileNumber\" name=\"mobileNumber\" onChange={this.onMobileChange.bind(this)} />\n                    <br/>\n                    <label for=\"pword\">Password:</label>\n                    <br/>\n                    <input type=\"password\" id=\"pword\" name=\"pword\" onChange={this.onPasswordChange.bind(this)} />\n                    <br/>\n                    <label for=\"pword\">Confirm Password:</label>\n                    <br/>\n                    <input type=\"password\" id=\"cpword\" name=\"cpword\" onChange={this.onConfirmPasswordChange.bind(this)} />\n                    <br/>\n                    <button\n                        type=\"button\"\n                        class=\"primary button\"\n                        onClick={this.submitSignUpForm.bind(this)}\n                    >\n                        Submit\n                    </button>\n                </form>\n                <label for=\"signup\" ></label>\n                Already signed up?<a onClick={this.openLogin.bind(this)}> Login</a>\n            </div>\n        );\n    }\n}\n\nexport default SignUp;\n","import { Card, CardImg, CardBody, CardTitle, CardText, Button, CardFooter, CardHeader, Alert } from 'reactstrap';\n\nvar React = require('react');\nconst axios = require('axios');\nvar ReactDOM = require('react-dom');\n\nclass LearnWords extends React.Component {\n\n    state = {\n        word : \"\",\n        meaning : \"\",\n        revealMeaning : \"\"\n    }\n\n    componentDidMount = () => {\n        var word, meaning\n        axios.get('/get-words')\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    console.log(result);\n                    word = result.data.word;\n                    meaning = result.data.meaning;\n\n                    this.setState({\n                        word : word,\n                        meaning : meaning,\n                        revealMeaning : \"\"\n                    })\n\n                }\n             });\n    }\n\n    rememberWord = () => {\n        var word, meaning\n        axios.post('/learnt-word', this.state)\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    word = result.data.word;\n                    meaning = result.data.meaning;\n\n                    this.setState({\n                        word : word,\n                        meaning : meaning,\n                        revealMeaning : \"\"\n                    })\n                }\n                \n             });\n\n    }\n\n    dontRememberWord = () => {\n        var word, meaning\n        axios.post('/forgot-word', this.state)\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    word = result.data.word;\n                    meaning = result.data.meaning;\n\n                    this.setState({\n                        word : word,\n                        meaning : meaning,\n                        revealMeaning : \"\"\n                    })\n                }\n                \n             });\n    }\n\n    revealMeaning = () => {\n        this.setState({\n            revealMeaning : this.state.meaning\n        })\n    }\n\n    openFlaggedWords = () => {\n        this.props.history.push('/flagged')\n    }\n\n    flagWord = () => {\n\n        var word, meaning\n        axios.post('/add-flag', this.state)\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    document.getElementsByClassName('alerts')[0].style.visibility = 'visible';\n                    setTimeout(function() { \n                        document.getElementsByClassName('alerts')[0].style.visibility = 'hidden';\n                    }, 2000);\n                }\n                \n             });\n    }\n    \n    hideAlert = () => {\n        document.getElementsByClassName('alerts')[0].style.visibility = 'hidden';\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"alerts\" style={{visibility:\"hidden\"}} onClick={this.hideAlert.bind(this)}>\n                    <Alert color='success'>Word has been flagged</Alert>\n                </div>\n                <div className=\"flagged-words\">\n                    <Button className='btn-simple btn-round' color='info'  onClick={this.openFlaggedWords.bind(this)}>Flagged Words</Button>\n                </div>\n                <div className=\"learn-words\">\n                    <Card className=\"learn-card\">\n                        <CardHeader className=\"text-center\">\n                            <CardTitle>{this.state.word}</CardTitle>\n                        </CardHeader>\n                        <CardBody className=\"card-body\" className=\"text-center\">\n                            <CardText>{this.state.revealMeaning}</CardText>\n                            <br/>\n                            <Button color='info' onClick={this.revealMeaning.bind(this)}>Reveal</Button>\n                        </CardBody>\n                        <CardFooter className=\"text-center\">\n                            <Button onClick={this.rememberWord.bind(this)} color='primary' className='button-size'>I remember this</Button>\n                            <Button onClick={this.dontRememberWord.bind(this)} color='warning' className='button-size'>Dont Remember yet</Button>\n                            <br/>\n                            <br/>\n                            <Button onClick={this.flagWord.bind(this)} color='danger'>Flag Word</Button>\n                        </CardFooter>\n                    </Card>\n                </div>\n            </div> \n        );\n    }\n}\n\nexport default LearnWords;\n","import { Card, CardImg, CardBody, CardTitle, CardText, Button, CardFooter, CardHeader, Alert } from 'reactstrap';\n\nvar React = require('react');\nconst axios = require('axios');\nvar ReactDOM = require('react-dom');\n\nclass FlaggedWords extends React.Component {\n\n    state = {\n        word : \"\",\n        meaning : \"\",\n        revealMeaning : \"\"\n    }\n\n    componentDidMount = () => {\n        var word, meaning\n        axios.get('/get-flagged-word')\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    word = result.data.word;\n                    meaning = result.data.meaning;\n                    console.log(result.data)\n                    this.setState({\n                        word : word,\n                        meaning : meaning,\n                        revealMeaning : \"\"\n                    })\n\n                }\n             });\n    }\n\n    nextWord = () => {\n\n        var word, meaning\n        axios.get('/get-flagged-word', this.state)\n             .then((result) => {\n\n                if (!result.data.Success) {\n                    alert(\"Cant get word dude :(\");\n                } else {\n                    word = result.data.word;\n                    meaning = result.data.meaning;\n\n                    this.setState({\n                        word : word,\n                        meaning : meaning,\n                        revealMeaning : \"\"\n                    })\n                }\n                \n             });\n    }\n\n    revealMeaning = () => {\n        this.setState({\n            revealMeaning : this.state.meaning\n        })\n    }\n\n    openLearnWords = () => {\n        this.props.history.push('/learn')\n    }\n\n    hideAlert = () => {\n        document.getElementsByClassName('alerts')[0].style.visibility = 'hidden';\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"alerts\" style={{visibility:\"hidden\"}} onClick={this.hideAlert.bind(this)}>\n                    <Alert color='success'>Word has been flagged</Alert>\n                </div>\n                <div className=\"flagged-words\">\n                    <Button className='btn-simple btn-round' color='info' onClick={this.openLearnWords.bind(this)}>Learn Words</Button>\n                </div>\n                <div className=\"learn-words\">\n                    <Card className=\"learn-card\">\n                        <CardHeader className=\"text-center\">\n                            <CardTitle>{this.state.word}</CardTitle>\n                        </CardHeader>\n                        <CardBody className=\"card-body\" className=\"text-center\">\n                            <CardText>{this.state.revealMeaning}</CardText>\n                            <br/>\n                            <Button color='info' onClick={this.revealMeaning.bind(this)}>Reveal</Button>\n                        </CardBody>\n                        <CardFooter className=\"text-center\">\n                            <Button onClick={this.nextWord.bind(this)} color='primary'>Next Word</Button>\n                        </CardFooter>\n                    </Card>\n                </div>\n            </div> \n        );\n    }\n}\n\nexport default FlaggedWords;\n","var React = require('react');\n\nclass Main extends React.Component {\n\n    redirectToLogin = () => {\n        this.props.history.push('/auth/login');\n    }\n\n    redirectToSignUp= () => {\n        this.props.history.push('/auth/signup');\n    }\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <button\n                    type=\"button\"\n                    class=\"primary button large login-button\"\n                    onClick={this.redirectToLogin.bind(this)}\n                >\n                    Login\n                </button>\n                {/* Move this into modal or whatevers */}\n                <button\n                    type=\"button\"\n                    class=\"primary button large login-button\"\n                    onClick={this.redirectToSignUp.bind(this)}\n                >\n                    SignUp\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","\n\nvar React = require('react');\n\n\nclass Dashboard extends React.Component {\n\n    redirectToChat = () => {\n        this.props.history.push('/chat');\n    }\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <button\n                    type=\"button\"\n                    class=\"chatButton\"\n                    onClick={this.redirectToChat.bind(this)}\n                >\n                    Chat\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","\nconst axios = require('axios');\nvar React = require('react');\n\n\nclass Chat extends React.Component {\n\n    componentDidMount = () => {\n        console.log(\"logging on console\")\n        axios.get('/check_creds')\n             .then((result) => {\n                console.log(\"here we are\")\n                if (!result.data.Success) {\n                    this.props.history.push('/auth/login');\n                    alert(\"Unable to Login\");\n                } else {\n                    this.props.history.push('/dashboard/');\n                }\n             });\n    }\n    render() {\n        return (\n            <div className=\"navbar\">\n                <p>This is the chat section dude</p>\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n","import LearnWords from './components/LearnWords';\nimport FlaggedWords from './components/FlaggedWords';\nimport Main from './components/Main';\nimport Auth from './components/Auth';\nimport Dashboard from './components/Dashboard';\nimport Chat from './components/Chat';\n\nvar React = require('react');\nvar {Route, HashRouter} = require('react-router-dom');\n\nvar Routes = (props) => {\n    return (\n        <HashRouter>\n            <Route path=\"/\" exact component={Main} />\n            <Route path=\"/auth\" component={Auth} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/chat\" component={Chat} />\n            <Route path='/learn' component={LearnWords} />\n            <Route path='/flagged' component={FlaggedWords} />\n        </HashRouter>\n    );\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes.jsx';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles/black-dashboard-pro-react.css'\nimport './styles/style.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}